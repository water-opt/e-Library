{"ast":null,"code":"import axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nexport const storeToken = token => {\n  localStorage.setItem('token', token);\n};\nexport const removeToken = () => {\n  localStorage.removeItem('token');\n};\nexport const isTokenExpired = token => {\n  const decodedToken = jwtDecode(token);\n  if (!decodedToken) {\n    return true;\n  }\n  const expirationTime = decodedToken.exp * 1000;\n  return Date.now() > expirationTime;\n};\nexport const getToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token || isTokenExpired(token)) {\n    return null;\n  }\n  return token;\n};\nexport const login = async (navigate, setLogin, setRole, credentials) => {\n  try {\n    const response = await axios.post('/api/user/login', credentials);\n    const {\n      token\n    } = response.data;\n    if (!token) {\n      throw new Error('Login failed: No token provided');\n    }\n    const decodedToken = jwtDecode(token);\n    if (!decodedToken || typeof decodedToken.role === 'undefined') {\n      throw new Error('An token error occurred');\n    }\n    storeToken(token);\n    setRole(decodedToken.role);\n    setLogin(true);\n    navigate('/user/home');\n  } catch (error) {\n    var _error$response, _error$response$data;\n    const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'An error occurred';\n    throw new Error(error);\n  }\n};\nexport const logout = () => {\n  removeToken();\n};\nexport const getUserRole = () => {\n  const token = getToken();\n  if (token) {\n    const decodedToken = jwtDecode(token);\n    return decodedToken.role;\n  }\n  return null;\n};","map":{"version":3,"names":["axios","jwtDecode","storeToken","token","localStorage","setItem","removeToken","removeItem","isTokenExpired","decodedToken","expirationTime","exp","Date","now","getToken","getItem","login","navigate","setLogin","setRole","credentials","response","post","data","Error","role","error","_error$response","_error$response$data","errorMessage","message","logout","getUserRole"],"sources":["C:/Users/unknown/Desktop/New folder/Library Management System/frontend/src/services/auth.js"],"sourcesContent":["import axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n\r\nexport const storeToken = (token) => {\r\n    localStorage.setItem('token', token);\r\n};\r\n\r\nexport const removeToken = () => {\r\n    localStorage.removeItem('token');\r\n};\r\n\r\nexport const isTokenExpired = (token) => {\r\n    const decodedToken = jwtDecode(token);\r\n    if (!decodedToken) {\r\n        return true;\r\n    }\r\n\r\n    const expirationTime = decodedToken.exp * 1000;\r\n    return Date.now() > expirationTime;\r\n};\r\n\r\nexport const getToken = () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token || isTokenExpired(token)) {\r\n        return null;\r\n    }\r\n    return token;\r\n};\r\n\r\nexport const login = async (navigate, setLogin, setRole, credentials) => {\r\n    try {\r\n        const response = await axios.post('/api/user/login', credentials);\r\n        const { token } = response.data;\r\n        \r\n        if (!token) {\r\n            throw new Error('Login failed: No token provided');\r\n        }\r\n\r\n        const decodedToken = jwtDecode(token);\r\n\r\n        if (!decodedToken || typeof decodedToken.role === 'undefined') {\r\n            throw new Error('An token error occurred');\r\n        }\r\n        \r\n        storeToken(token);\r\n        setRole(decodedToken.role);\r\n        setLogin(true);\r\n        navigate('/user/home');\r\n    } catch (error) {\r\n        const errorMessage = error.response?.data?.message || 'An error occurred';\r\n        throw new Error(error);\r\n    }\r\n};\r\n\r\nexport const logout = () => {\r\n    removeToken();\r\n};\r\n\r\nexport const getUserRole = () => {\r\n    const token = getToken();\r\n    if (token) {\r\n        const decodedToken = jwtDecode(token);\r\n        return decodedToken.role;\r\n    }\r\n    return null;\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AAGtC,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAAK;EACjCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;AACxC,CAAC;AAED,OAAO,MAAMG,WAAW,GAAGA,CAAA,KAAM;EAC7BF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;AACpC,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIL,KAAK,IAAK;EACrC,MAAMM,YAAY,GAAGR,SAAS,CAACE,KAAK,CAAC;EACrC,IAAI,CAACM,YAAY,EAAE;IACf,OAAO,IAAI;EACf;EAEA,MAAMC,cAAc,GAAGD,YAAY,CAACE,GAAG,GAAG,IAAI;EAC9C,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,cAAc;AACtC,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAGA,CAAA,KAAM;EAC1B,MAAMX,KAAK,GAAGC,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACZ,KAAK,IAAIK,cAAc,CAACL,KAAK,CAAC,EAAE;IACjC,OAAO,IAAI;EACf;EACA,OAAOA,KAAK;AAChB,CAAC;AAED,OAAO,MAAMa,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,WAAW,KAAK;EACrE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;IACjE,MAAM;MAAEjB;IAAM,CAAC,GAAGkB,QAAQ,CAACE,IAAI;IAE/B,IAAI,CAACpB,KAAK,EAAE;MACR,MAAM,IAAIqB,KAAK,CAAC,iCAAiC,CAAC;IACtD;IAEA,MAAMf,YAAY,GAAGR,SAAS,CAACE,KAAK,CAAC;IAErC,IAAI,CAACM,YAAY,IAAI,OAAOA,YAAY,CAACgB,IAAI,KAAK,WAAW,EAAE;MAC3D,MAAM,IAAID,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IAEAtB,UAAU,CAACC,KAAK,CAAC;IACjBgB,OAAO,CAACV,YAAY,CAACgB,IAAI,CAAC;IAC1BP,QAAQ,CAAC,IAAI,CAAC;IACdD,QAAQ,CAAC,YAAY,CAAC;EAC1B,CAAC,CAAC,OAAOS,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACZ,MAAMC,YAAY,GAAG,EAAAF,eAAA,GAAAD,KAAK,CAACL,QAAQ,cAAAM,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBJ,IAAI,cAAAK,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,mBAAmB;IACzE,MAAM,IAAIN,KAAK,CAACE,KAAK,CAAC;EAC1B;AACJ,CAAC;AAED,OAAO,MAAMK,MAAM,GAAGA,CAAA,KAAM;EACxBzB,WAAW,CAAC,CAAC;AACjB,CAAC;AAED,OAAO,MAAM0B,WAAW,GAAGA,CAAA,KAAM;EAC7B,MAAM7B,KAAK,GAAGW,QAAQ,CAAC,CAAC;EACxB,IAAIX,KAAK,EAAE;IACP,MAAMM,YAAY,GAAGR,SAAS,CAACE,KAAK,CAAC;IACrC,OAAOM,YAAY,CAACgB,IAAI;EAC5B;EACA,OAAO,IAAI;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}